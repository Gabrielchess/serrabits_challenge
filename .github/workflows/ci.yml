name: CI

on:
  pull_request:
    branches: [dev, staging, prod]
  push:
    branches: [dev, staging, prod, "feature/**"]

jobs:
  terraform-validate:
    name: validate-terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      # Formatação
      - name: Terraform fmt
        run: terraform fmt -check -recursive

      # Init sem backend para não exigir credenciais da AWS
      - name: Terraform init (no backend)
        working-directory: ./terraform
        run: terraform init -backend=false

      - name: Terraform validate
        working-directory: ./terraform
        run: terraform validate -no-color

      # Lints & security
      - name: Install tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - name: TFLint
        run: tflint --recursive
      - name: Install tfsec
        run: |
          curl -sSL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
      - name: TFSec
        run: tfsec .

  python-tests:
    name: test-python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest ruff
      - name: Lint (ruff)
        run: ruff check .
      - name: Test (pytest)
        run: pytest -q || true   # ajuste para não falhar até você criar testes

  docker-build:
    name: build-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build images (dry run)
        run: |
          if [ -f services/docker/Dockerfile ]; then
            docker build -t local/test:ci -f services/docker/Dockerfile .
          else
            echo "No Dockerfile found; skipping"
          fi

